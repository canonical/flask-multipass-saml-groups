# Copyright 2024 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = lint, unit, static, coverage-report

[vars]
src_path = {toxinidir}/flask_multipass_saml_groups/
tst_path = {toxinidir}/tests/
all_path = {[vars]src_path} {[vars]tst_path}

[testenv]
setenv =
  PYTHONPATH = {toxinidir}:{[vars]src_path}
  PYTHONBREAKPOINT=ipdb.set_trace
  PY_COLORS=1
passenv =
  PYTHONPATH

[testenv:fmt]
description = Apply coding style standards to code
deps =
    black
    isort
commands =
    isort {[vars]all_path}
    black {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
deps =
    -r{toxinidir}/requirements.dev.txt
    black
    codespell
    flake8-builtins
    flake8-copyright<6.0.0
    flake8-docstrings-complete>=1.0.3
    flake8-docstrings>=1.6.0
    flake8-test-docs>=1.0
    flake8<6.0.0
    isort
    mypy
    pep8-naming
    poetry
    pydocstyle>=2.10
    pylint
    pyproject-flake8<6.0.0
    pytest
    types-PyYAML
    types-requests
commands_pre =
    poetry install --no-root
commands =
    pydocstyle {[vars]src_path}
    codespell {toxinidir} --skip {toxinidir}/.git --skip {toxinidir}/.tox \
      --skip {toxinidir}/build  --skip {toxinidir}/venv \
      --skip {toxinidir}/.mypy_cache \
      --skip {toxinidir}/poetry.lock
    # pflake8 wrapper supports config from pyproject.toml
    pflake8 {[vars]all_path} --ignore=W503
    isort --check-only --diff {[vars]all_path}
    black --check --diff {[vars]all_path}
    mypy {[vars]all_path}
    pylint {[vars]all_path}


[testenv:unit]
description = Run unit tests
deps =
    -r{toxinidir}/requirements.dev.txt
    coverage[toml]
    poetry
    pytest
commands_pre =
    poetry install --no-root
commands =
    coverage run --source={[vars]src_path} --omit={[vars]src_path}/plugin.py \
        -m pytest --ignore={[vars]tst_path}integration -v --tb native -s {posargs}
    coverage report

[testenv:coverage-report]
description = Create test coverage report
deps =
    -r{toxinidir}/requirements.dev.txt
    coverage[toml]
    poetry
    pytest
commands_pre =
    poetry install --no-root
commands =
    coverage report

[testenv:static]
description = Run static analysis tests
deps =
    bandit[toml]
    poetry
    -r{toxinidir}/requirements.dev.txt
commands_pre =
    poetry install --no-root
commands =
    bandit -c {toxinidir}/pyproject.toml -r {[vars]src_path} {[vars]tst_path}


[testenv:integration]
description = Run integration tests
deps =
    -r{toxinidir}/requirements.dev.txt
    # required for use with operator workflows
    # Type error problem with newer version of macaroonbakery,
    macaroonbakery==1.3.2
    poetry
    pytest
    # operator workflows require some options to pytest, which pytest-operator includes
    pytest-operator
    # Pin juju version to avoid issues with version 3.3.1.0
    juju >=3.0,<=3.3.0
commands_pre =
    poetry install --no-root
commands =
    pytest -v --tb native --ignore={[vars]tst_path}unit --log-cli-level=INFO -s {posargs}


[testenv:src-docs]
allowlist_externals=
    sh
    poetry
setenv =
    PYTHONPATH = {toxinidir}
description = Generate documentation for src
deps =
    lazydocs
    poetry
commands_pre =
    poetry install --no-root
commands =
    ; can't run lazydocs directly due to needing to run it on src/* which produces an invocation error in tox
    sh generate-src-docs.sh
